/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @addtogroup HdfFaceAuth
 * @{
 *
 * @brief Provides APIs for the face auth driver.
 *
 * The face auth driver provides a unified interface for the face auth service to access the face auth driver.
 * After obtaining the face auth driver proxy, the service can call related APIs to obtain executors.
 * After obtaining the face auth executors, the service can call related APIs to get executor info, get
 * template info, enroll template, authenticate template, delete template, etc.
 *
 * @since 3.2
 */

/**
 * @file FaceAuthTypes.idl
 *
 * @brief Defines face auth driver enumeration and data structure, including AuthType, ExecutorRole, ExecutorSecureLevel,
 * CommandId, FaceTipsCode, ExecutorInfo and TemplateInfo.
 *
 * @since 3.2
 */

package ohos.hdi.face_auth.v1_0;

/**
 * Enumerates credential type for authentication.
 *
 * @since 3.2
 * @version 1.0
 */
enum AuthType : int {
    PIN = 1, /**< Indicates authentication type is PIN. */
    FACE = 2, /**< Indicates authentication type is face. */
    FINGERPRINT = 4, /**< Indicates authentication type is fingerprint. */
};

/**
 * Enumerates executor role.
 *
 * @since 3.2
 * @version 1.0
 */
enum ExecutorRole : int {
    COLLECTOR = 1, /**< Indicates executor role is collector. */
    VERIFIER = 2, /**< Indicates executor role is verifier. */
    ALL_IN_ONE = 3, /**< Indicates executor role is combination of collector and verifier, cannot be used as collector or verifier. */
};

/**
 * Enumerates executor secure level.
 *
 * @since 3.2
 * @version 1.0
 */
enum ExecutorSecureLevel : int {
    ESL0 = 0, /**< Indicates executor secure level is ESL0. */
    ESL1 = 1, /**< Indicates executor secure level is ESL1. */
    ESL2 = 2, /**< Indicates executor secure level is ESL2. */
    ESL3 = 3, /**< Indicates executor secure level is ESL3. */
};

/**
 * Enumerates command id.
 *
 * @since 3.2
 * @version 1.0
 */
enum CommandId : int {
    LOCK_TEMPLATE = 1, /**< Indicates lock template command id. */
    UNLOCK_TEMPLATE = 2, /**< Indicates unlock template command id. */
    VENDOR_COMMAND_BEGIN = 10000 /**< Vendor may add custom command id after this. */
};

/**
 * Enumerates prompt codes.
 *
 * @since 3.2
 * @version 1.0
 */
enum FaceTipsCode : int {
    FACE_AUTH_TIP_TOO_BRIGHT = 1, /**< Indicates that the obtained facial image is too bright due to high illumination. */
    FACE_AUTH_TIP_TOO_DARK = 2, /**< Indicates that the obtained facial image is too dark due to low illumination. */
    FACE_AUTH_TIP_TOO_CLOSE = 3, /**< Indicates that the face is too close to the device. */
    FACE_AUTH_TIP_TOO_FAR = 4, /**< Indicates that the face is too far away from the device. */
    FACE_AUTH_TIP_TOO_HIGH = 5, /**< Indicates that the device is too high, and that only the upper part of the face is captured. */
    FACE_AUTH_TIP_TOO_LOW = 6, /**< Indicates that the device is too low, and that only the lower part of the face is captured. */
    FACE_AUTH_TIP_TOO_RIGHT = 7, /**< Indicates that the device is deviated to the right, and that only the right part of the face is captured. */
    FACE_AUTH_TIP_TOO_LEFT = 8, /**< Indicates that the device is deviated to the left, and that only the left part of the face is captured. */
    FACE_AUTH_TIP_TOO_MUCH_MOTION = 9, /**< Indicates that the face moves too much during facial information collection. */
    FACE_AUTH_TIP_POOR_GAZE = 10, /**< Indicates the user is not gazing at the device. */
    FACE_AUTH_TIP_NOT_DETECTED = 11, /**< Indicates that no face is detected. */
    VENDOR_FACE_AUTH_TIP_BEGIN = 10000 /**< Vendor may add custom face auth tip after this. */
};

/**
 * Indicates the executor info.
 *
 * @since 3.2
 * @version 1.0
 */
struct ExecutorInfo {
    unsigned short sensorId; /**< Indicates sensor id. Sensor id must be unique in driver. */
    unsigned int executorType; /**< Indicates executor type. */
    enum ExecutorRole executorRole; /**< Indicates executor role, see @{ExecutorRole}. */
    enum AuthType authType; /**< Indicates auth type, see @{AuthType}. */
    enum ExecutorSecureLevel esl; /**< Indicates executor secure level, see @{ExecutorSecureLevel}. */
    unsigned char[] publicKey; /**< Indicates publicKey. */
    unsigned char[] extraInfo; /**< Indicates extra info. */
};

/**
 * Indicates the template info.
 *
 * @since 3.2
 * @version 1.0
 */
struct TemplateInfo {
    unsigned int executorType; /**< Indicates executor type. */
    int lockoutDuration; /**< Indicates lockout duration in seconds. */
    int remainAttempts; /**< Indicates remain attempts before a lockout. */
    unsigned char[] extraInfo; /**< Indicates extra info. */
};
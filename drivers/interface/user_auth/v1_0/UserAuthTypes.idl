/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
 * @addtogroup HdfUserAuth
 * @{
 *
 * @brief Provides APIs for the user auth driver.
 *
 * The user auth driver provides a unified interface for the user auth service to access the user auth driver.

 *
 * @since 3.2
 */

 package ohos.hdi.user_auth.v1_0;

 /**
 * Enumerates credential type for authentication.
 *
 * @since 3.2
 * @version 1.0
 */
enum AuthType : int {
    ALL = 0, /**< Indicates authentication type is ALL. */
    PIN = 1, /**< Indicates authentication type is PIN. */
    FACE = 2, /**< Indicates authentication type is face. */
    FINGERPRINT = 4, /**< Indicates authentication type is fingerprint. */
};

/**
 * Enumerates executor role.
 *
 * @since 3.2
 * @version 1.0
 */
enum ExecutorRole : int {
    COLLECTOR = 1,  /**< Indicates executor role is collector. */
    VERIFIER = 2,   /**< Indicates executor role is verifier. */
    ALL_IN_ONE = 3, /**< Indicates executor role is combination of collector and verifier. */
};

/**
 * Enumerates executor secure level.
 *
 * @since 3.2
 * @version 1.0
 */
enum ExecutorSecureLevel : int {
    ESL0 = 0, /**< Indicates executor secure level is ESL0. */
    ESL1 = 1, /**< Indicates executor secure level is ESL1. */
    ESL2 = 2, /**< Indicates executor secure level is ESL2. */
    ESL3 = 3, /**< Indicates executor secure level is ESL3. */
};

/**
 * Pin auth's subtype.
 *
 * @since 3.2
 * @version 1.0
 */
enum PinSubType : int {
    PIN_SIX = 10000, /**< Indicates 6 digit pin. */
    PIN_NUMBER = 10001, /**< Indicates digit pin. */
    PIN_MIX = 10002, /**< Indicates mixing pin. */
};

/**
 * Schedule mode.
 *
 * @since 3.2
 * @version 1.0
 */
enum ScheduleMode : int {
    ENROLL = 0, /**< Indicates schedule mode is enrollment. */
    AUTH = 1, /**< Indicates schedule mode is authentication. */
    IDENTIFY = 2, /**< Indicates schedule mode is identification. */
};

struct ExecutorRegisterInfo {
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
    enum ExecutorRole executorRole; /**< Indicates executor role, see @{ExecutorRole}. */
    unsigned int executorSensorHint; /**< Indicates executor sensor hint under the same authentication type, 0 is not allowed. */
    unsigned int executorMatcher; /**< Indicates executor matcher. */
    enum ExecutorSecureLevel esl; /**< Indicates executor secure level, see @{ExecutorSecureLevel}. */
    unsigned char[] publicKey; /**< Indicates publicKey. */
};

struct ExecutorInfo {
    unsigned long executorIndex; /**< Indicates executor index under the authentication frameworks. */
    struct ExecutorRegisterInfo info; /**< Indicates executor registration information, see @{ExecutorRegisterInfo}. */
};

struct ScheduleInfo {
    unsigned long scheduleId; /**< Indicates schedule id of authentication. */
    unsigned long[] templateIds; /**< Indicates the templates to authenticate. */
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
    unsigned int executorMatcher; /**< Indicates executor matcher. */
    enum ScheduleMode scheduleMode; /**< Indicates schedule mode, see @{ScheduleMode}. */
    struct ExecutorInfo[] executors; /**< Indicates executor information, see @{ExecutorInfo}. */
};

struct AuthSolution {
    int userId; /**< Indicates user id. */
    unsigned int authTrustLevel; /**< Indicates authentication trust level of authentication. */
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
    unsigned int executorSensorHint; /**< Indicates executor sensor hint, 0 indicates that no value is specified. */
    unsigned char[] challenge; /**< Indicates challenge of authentication. */
};

struct ExecutorSendMsg {
    unsigned long executorIndex; /**< Indicates executor index under the authentication frameworks. */
    int commandId; /**< Indicates command id. */
    unsigned char[] msg; /**< Indicates executor msg to send. */
};

struct AuthResultInfo {
    int result; /**< Indicates result. */
    int lockoutDuration; /**< Indicates lockout duration in seconds. */
    int remainAttempts; /**< Indicates remaining authentication times before a lockout. */
    struct ExecutorSendMsg[] msgs; /**< Indicates executor msgs, see @{ExecutorSendMsg}. */
    unsigned char[] token; /**< Indicates authentication token. */
    unsigned char[] rootSecret; /**< Indicates protection key for user file key. */
};

struct IdentifyResultInfo {
    int result; /**< Indicates result. */
    int userId; /**< Indicates user id. */
    unsigned char[] token; /**< Indicates identification token. */
};

struct EnrollParam {
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
    unsigned int executorSensorHint; /**< Indicates executor sensor hint, 0 indicates that no value is specified. */
};

struct CredentialInfo {
    unsigned long credentialId; /**< Indicates credential Id. */
    unsigned long executorIndex; /**< Indicates executor index under the authentication frameworks. */
    unsigned long templateId; /**< Indicates template Id. */
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
    unsigned int executorMatcher; /**< Indicates executor matcher. */
    unsigned int executorSensorHint; /**< Indicates executor sensor hint under the same authentication type. */
};

struct EnrolledInfo {
    unsigned long enrolledId; /**< Indicates enrolled id. */
    enum AuthType authType; /**< Indicates authentication type, see @{AuthType}. */
};

struct EnrollResultInfo {
    unsigned long credentialId; /**< Indicates credential id. */
    struct CredentialInfo oldInfo; /**< Indicates old credential information, see {@link CredentialInfo}. */
    unsigned char[] rootSecret; /**< Indicates protection key for user file key. */
};
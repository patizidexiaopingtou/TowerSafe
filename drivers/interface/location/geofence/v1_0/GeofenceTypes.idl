/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * @addtogroup HdiGeofence
 * @{
 *
 * @brief Provides unified APIs for the GNSS geofence service.
 *
 * A gnss service module can use the interfaces of this module to add fences, and delete fences, and monitor
 * fence status changes.
 *
 * @since 3.2
 */

/*
 * @file GeofenceTypes.idl
 *
 * @brief Defines the data structure used by the geofence module.
 *
 * @since 3.2
 * @version 1.0
 */

package ohos.hdi.location.geofence.v1_0;

/*
 * @brief Defines the type of the geofence event to be listened on.
 *
 * @since 3.2
 */
enum GeofenceEvent {
    GEOFENCE_EVENT_UNCERTAIN = 1,
    GEOFENCE_EVENT_ENTERED = 2,
    GEOFENCE_EVENT_EXITED = 4,
};

/*
 * @brief Define the result and error code of the operation fence.
 *
 * @since 3.2
 */
enum GeofenceOperateResult {
    OPERATION_SUCCESS = 0,
    OPERATION_ERROR_UNKNOWN = -100,
    OPERATION_ERROR_TOO_MANY_GEOFENCES = -101,
    OPERATION_ERROR_GEOFENCE_INDEX_EXISTS = -102,
    OPERATION_ERROR_PARAMS_INVALID = -103,
};

/*
 * @brief Defines the action type of the operation fence.
 *
 * @since 3.2
 */
enum GeofenceOperateType {
    TYPE_ADD    = 1,
    TYPE_DELETE = 2,
};

/*
 * @brief Define geofence parameters.
 *
 * @since 3.2
 */
struct GeofenceInfo {
    int fenceIndex;
    double latitude;
    double longitude;
    double radius;
};

/*
 * @brief Defines the GNSS positioning result structure.
 *
 * @since 3.2
 */
struct LocationInfo {
    double latitude;
    double longitude;
    double altitude;
    float accuracy;
    float speed;
    double direction;
    long timeStamp;
    long timeSinceBoot;
};

/*
 * Copyright (c) 2022-2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ohos.hdi.vibrator.v1_1;

/**
 * @brief Enumerates the vibration modes of this vibrator.
 *
 * @since 2.2
 */
enum HdfVibratorMode {
    /**< Indicates the one-shot vibration with the given duration. */
    HDF_VIBRATOR_MODE_ONCE,
    /**< Indicates the periodic vibration with the preset effect. */
    HDF_VIBRATOR_MODE_PRESET,
    /**< Indicates invalid the effect mode. */
    HDF_VIBRATOR_MODE_BUTT,
};

/**
 * @brief Enumerates the effect types of the composite effects.
 *
 * @since 3.2
 */
enum HdfEffectType {
    /**< Indicates the time effect type of the given time series. */
    HDF_EFFECT_TYPE_TIME,
    /**< Indicates primitive vibration effect type for a given primitive vibration sequence. */
    HDF_EFFECT_TYPE_PRIMITIVE,
    /**< Indicates invalid the effect type. */
    HDF_EFFECT_TYPE_BUTT,
};

/**
 * @brief Defines the vibration parameters.
 *
 * The parameters include the setting intensity and frequency capability the on and intensity and frequency range.
 *
 * @since 3.2
 */
struct HdfVibratorInfo {
    /**< setting intensity capability. 1 indicates support, 0 indicates not support. */
    boolean isSupportIntensity;
    /**< setting frequency capability. 1 indicates support, 0 indicates not support. */
    boolean isSupportFrequency;
    /**< Max intensity. */
    unsigned short intensityMaxValue;
    /**< Min intensity. */
    unsigned short intensityMinValue;
    /**< Max frequency(Hz). */
    short frequencyMaxValue;
    /**< Min frequency(Hz). */
    short frequencyMinValue;
};

/**
 * @brief Defines the time effect parameters.
 *
 * The parameters include delay, time, intensity and frequency of vibration.
 *
 * @since 3.2
 */
struct TimeEffect {
    int delay;                   /** Waiting time. */
    int time;                    /** Vibration time. */
    unsigned short intensity;    /** Vibration intensity. */
    short frequency;             /** Vibration frequency(Hz). */
};

/**
 * @brief Defines the primitive effect parameters.
 *
 * The parameters include delay, effect id and vibration intensity.
 *
 * @since 3.2
 */
struct PrimitiveEffect {
    int delay;                   /** Waiting time. */
    int effectId;                /** Effect id. */
    unsigned short intensity;    /** Vibration intensity. */
};

/**
 * @brief Defines two effects for custom composite effects.
 *
 * The parameters include time effect and primitive effect.
 *
 * @since 3.2
 */
union CompositeEffect {
    struct TimeEffect timeEffect;              /** Time effect, see {@link TimeEffect}. */
    struct PrimitiveEffect primitiveEffect;    /** Primitive effect, see {@link PrimitiveEffect}. */
};

/**
 * @brief Defines the composite vibration effect parameters.
 *
 * The parameters include type and sequences of composite effects.
 *
 * @since 3.2
 */
struct HdfCompositeEffect {
    /** Type of the composite effect, see {@link union HdfEffectType}. */
    int type;
    /** The sequences of composite effects, see {@link union CompositeEffect}. */
    union CompositeEffect[] compositeEffects;
};

/**
 * @brief Defines the vibration effect information.
 *
 * The information include the capability to set the effect and the vibration duration of the effect.
 *
 * @since 3.2
 */
struct HdfEffectInfo {
    /** Vibration duration of the effect, in milliseconds. */
    int duration;
    /**< setting effect capability. 1 indicates support, 0 indicates not support. */
    boolean isSupportEffect;
};
# Copyright (c) 2022 Shenzhen Kaihong DID Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")
ohos_executable("codec_hdi_omx_decode") {
  include_dirs = [
    "./include",
    "//drivers/peripheral/codec/hal/include",
    "//drivers/hdf_core/adapter/uhdf2/include/hdi",
    "//drivers/peripheral/codec/omx/include",
    "//drivers/peripheral/codec/interfaces/include",
    "//third_party/openmax/api/1.1.2",
    "//drivers/peripheral/display/hdi_service/gralloc/include",
  ]

  sources = [
    "src/codec_hdi_decode.cpp",
    "src/command_parse.cpp",
  ]

  deps = [
    "//drivers/hdf_core/adapter/uhdf2/hdi:libhdi",
    "//drivers/hdf_core/adapter/uhdf2/host:libhdf_host",
    "//drivers/hdf_core/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/hdf_core/adapter/uhdf2/utils:libhdf_utils",
    "//drivers/peripheral/codec/hal:libcodec_hdi_omx_callback_type_service_impl",
    "//drivers/peripheral/codec/hal:libcodec_hdi_omx_client",
    "//third_party/bounds_checking_function:libsec_shared",
  ]

  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "drivers_peripheral_display:hdi_gralloc_client",
      "graphic_chipsetsdk:buffer_handle",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }
  install_enable = false
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_codec"
}

ohos_executable("codec_hdi_omx_encode") {
  include_dirs = [
    "./include",
    "//drivers/peripheral/codec/hal/include",
    "//drivers/hdf_core/adapter/uhdf2/include/hdi",
    "//drivers/peripheral/codec/omx/include",
    "//drivers/peripheral/codec/interfaces/include",
    "//third_party/openmax/api/1.1.2",
    "//drivers/peripheral/display/hdi_service/gralloc/include",
  ]

  sources = [
    "src/codec_hdi_encode.cpp",
    "src/command_parse.cpp",
  ]

  deps = [
    "//drivers/hdf_core/adapter/uhdf2/hdi:libhdi",
    "//drivers/hdf_core/adapter/uhdf2/host:libhdf_host",
    "//drivers/hdf_core/adapter/uhdf2/ipc:libhdf_ipc_adapter",
    "//drivers/hdf_core/adapter/uhdf2/utils:libhdf_utils",
    "//drivers/peripheral/codec/hal:libcodec_hdi_omx_callback_type_service_impl",
    "//drivers/peripheral/codec/hal:libcodec_hdi_omx_client",
    "//third_party/bounds_checking_function:libsec_shared",
  ]

  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "drivers_peripheral_display:hdi_gralloc_client",
      "graphic_chipsetsdk:buffer_handle",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }
  install_enable = false
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_codec"
}
group("codec_hdi_omx_demo") {
  deps = [
    ":codec_hdi_omx_decode",
    ":codec_hdi_omx_encode",
  ]
}

# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")
import("$hdf_framework_path/tools/hc-gen/hc_gen.gni")

hc_gen("build_codec_adapter_capabilities") {
  sources = [ rebase_path(
          "//vendor/${product_company}/${product_name}/hdf_config/uhdf/media_codec/codec_adapter_capabilities.hcs") ]
}

ohos_prebuilt_etc("codec_adapter_capabilities.hcb") {
  deps = [ ":build_codec_adapter_capabilities" ]
  hcs_outputs = get_target_outputs(":build_codec_adapter_capabilities")
  source = hcs_outputs[0]
  relative_install_dir = "hdfconfig"
  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_codec"
}

ohos_shared_library("libcodec_hdi_passthrough_impl") {
  include_dirs = [
    "//drivers/peripheral/codec/hal/include",
    "//drivers/peripheral/codec/hal/passthrough/adapter/include",
    "//drivers/peripheral/codec/hal/passthrough/include",
    "//drivers/peripheral/codec/hal/v1.0/codec_instance/include",
    "//drivers/peripheral/codec/hal/v1.0/share_mem/include",
    "//drivers/peripheral/codec/hal/v1.0/oem_interface/include",
    "//drivers/peripheral/codec/hal/v1.0/buffer_manager/include",
    "//drivers/peripheral/codec/interfaces/include",
    "//third_party/openmax/api/1.1.2",
  ]
  sources = [
    "../../hdi_service/codec_service_stub/codec_service.c",
    "../src/codec_component_capability_config.c",
    "../src/codec_config_parser.c",
    "../v1.0/codec_instance/src/codec_instance.c",
    "../v1.0/share_mem/src/ashmem_wrapper.cpp",
    "../v1.0/share_mem/src/share_mem.c",
    "adapter/src/component_common.cpp",
    "adapter/src/component_manager.cpp",
    "adapter/src/component_node.cpp",
    "src/codec_adapter.cpp",
    "src/codec_callback_if.c",
    "src/codec_capability_parser.c",
    "src/codec_component_capability.c",
    "src/codec_component_if.c",
    "src/codec_component_manager.c",
  ]
  defines = [ "CODEC_HAL_PASSTHROUGH" ]

  if (is_standard_system) {
    external_deps = [
      "c_utils:utils",
      "drivers_peripheral_display:hdi_gralloc_client",
      "graphic_chipsetsdk:buffer_handle",
      "hdf_core:libhdf_utils",
      "hiviewdfx_hilog_native:libhilog",
    ]
  } else {
    external_deps = [ "hilog:libhilog" ]
  }

  install_images = [ chipset_base_dir ]
  subsystem_name = "hdf"
  part_name = "drivers_peripheral_codec"
}

group("codec_hdi_passthrough") {
  CODEC_HCS_PATH = rebase_path(
          "//vendor/${product_company}/${product_name}/hdf_config/uhdf/media_codec")
  cmd = "if [ -f ${CODEC_HCS_PATH}/codec_adapter_capabilities.hcs ]; then echo true; else echo false; fi"
  HAVE_CODEC_HCS_PATH =
      exec_script("//build/lite/run_shell_cmd.py", [ cmd ], "value")
  if (HAVE_CODEC_HCS_PATH) {
    deps = [
      ":codec_adapter_capabilities.hcb",
      ":libcodec_hdi_passthrough_impl",
    ]
  }
}

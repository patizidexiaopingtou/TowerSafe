# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/python.gni")
import("//build/ohos.gni")

template("ohos_prebuilt_seccomp") {
  assert(defined(invoker.sources), "source must be defined for ${target_name}.")
  assert(defined(invoker.filtername),
         "source must be defined for ${target_name}.")

  _seccomp_filter_target = "gen_${target_name}"
  _seccomp_filter_file = target_gen_dir + "/${target_name}.c"

  action(_seccomp_filter_target) {
    script = "//base/startup/init/services/modules/seccomp/scripts/generate_code_from_policy.py"

    sources = invoker.sources
    sources += get_target_outputs(
            "//base/startup/init/services/modules/seccomp:syscall_to_nr_arm")
    sources += get_target_outputs(
            "//base/startup/init/services/modules/seccomp:syscall_to_nr_arm64")

    deps = [
      "//base/startup/init/services/modules/seccomp:syscall_to_nr_arm",
      "//base/startup/init/services/modules/seccomp:syscall_to_nr_arm64",
    ]

    args = []
    foreach(source, sources) {
      args += [
        "--srcfiles",
        rebase_path(source),
      ]
    }
    args += [
      "--dstfile",
      rebase_path(_seccomp_filter_file),
      "--bpfArrayName",
      invoker.filtername,
    ]

    outputs = [ _seccomp_filter_file ]
  }

  ohos_shared_library(target_name) {
    deps = [ ":${_seccomp_filter_target}" ]
    sources = get_target_outputs(":${_seccomp_filter_target}")

    if (defined(invoker.include_dirs)) {
      include_dirs = invoker.include_dirs
    }

    if (defined(invoker.install_enable)) {
      install_enable = invoker.install_enable
    }

    if (defined(invoker.part_name)) {
      part_name = invoker.part_name
    }

    if (defined(invoker.subsystem_name)) {
      subsystem_name = invoker.subsystem_name
    }

    if (defined(invoker.install_images)) {
      install_images = invoker.install_images
    }
  }
}

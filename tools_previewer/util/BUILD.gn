# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../gn/config.gni")
static_library("util_lite") {
  sources = [
    "CallbackQueue.cpp",
    "CommandParser.cpp",
    "CppTimer.cpp",
    "CppTimerManager.cpp",
    "EndianUtil.cpp",
    "FileSystem.cpp",
    "Interrupter.cpp",
    "JsonReader.cpp",
    "ModelManager.cpp",
    "PreviewerEngineLog.cpp",
    "PublicMethods.cpp",
    "SharedDataManager.cpp",
    "TimeTool.cpp",
    "TraceTool.cpp",
    "WebSocketServer.cpp",
  ]
  cflags = [ "-std=c++17" ]
  if (platform == "mingw_x86_64") {
    sources += [
      "windows/CrashHandler.cpp",
      "windows/LocalDate.cpp",
      "windows/LocalSocket.cpp",
    ]
  } else if (platform == "mac_arm64" || platform == "mac_x64") {
    sources += [
      "unix/CrashHandler.cpp",
      "unix/LocalDate.cpp",
      "unix/LocalSocket.cpp",
    ]
  } else if (platform == "linux_x64") {
    sources += [
      "unix/CrashHandler.cpp",
      "unix/LocalDate.cpp",
      "unix/LocalSocket.cpp",
    ]
  }

  include_dirs = [
    ".",
    "../cli/",
    "../mock/lite/",
    "//third_party/jsoncpp/include/json/",
    "//third_party/bounds_checking_function/include/"
  ]
  deps = [ "//third_party/libwebsockets:websockets_static" ]
}

static_library("util_rich") {
  libs = []
  sources = [
    "CallbackQueue.cpp",
    "CommandParser.cpp",
    "CppTimer.cpp",
    "CppTimerManager.cpp",
    "EndianUtil.cpp",
    "FileSystem.cpp",
    "Interrupter.cpp",
    "JsonReader.cpp",
    "ModelManager.cpp",
    "PreviewerEngineLog.cpp",
    "PublicMethods.cpp",
    "SharedDataManager.cpp",
    "TimeTool.cpp",
    "TraceTool.cpp",
    "WebSocketServer.cpp",
  ]
  cflags = [ "-std=c++17" ]
  if (platform == "mingw_x86_64") {
    sources += [
      "windows/CrashHandler.cpp",
      "windows/LocalDate.cpp",
      "windows/LocalSocket.cpp",
      "windows/ClipboardHelper.cpp",
      "windows/KeyboardHelper.cpp",
      "windows/StringHelper.cpp",
    ]
  } else if (platform == "mac_arm64" || platform == "mac_x64") {
    cflags += [ "-DNS_FORMAT_ARGUMENT(A)=" ]
    sources += [
      "unix/CrashHandler.cpp",
      "unix/LocalDate.cpp",
      "unix/LocalSocket.cpp",
      "unix/ClipboardObjc.mm",
      "unix/ClipboardHelper.cpp",
      "unix/KeyboardObjc.mm",
      "unix/KeyboardHelper.cpp",
    ]
    if (defined(enable_gn_2021)) {
      frameworks = [
        "Cocoa.framework",
        "Carbon.framework",
      ]
    } else {
      libs = [
        "Cocoa.framework",
        "Carbon.framework",
      ]
    }
  } else if (platform == "linux_x64") {
    sources += [
      "unix/CrashHandler.cpp",
      "unix/LocalDate.cpp",
      "unix/LocalSocket.cpp",
      "linux/ClipboardX11.cpp",
      "linux/ClipboardHelper.cpp",
      "linux/KeyboardHelper.cpp",
    ]
    libs += [
      "X11"
    ]
  }

  include_dirs = [
    ".",
    "../cli/",
    "../mock/rich/",
    "//third_party/jsoncpp/include/json/",
    "//third_party/bounds_checking_function/include/",
  ]
  deps = [ "//third_party/libwebsockets:websockets_static" ]
}

# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../../../protos.gni")
import("autogenerated.gni")

all_proto = auto_generated_ftrace_proto_sources + [
              "trace_plugin_config.proto",
              "trace_plugin_result.proto",
            ]

#######################################################
proto_out_dir = "$root_gen_dir/cpp/" + rebase_path(".", "//")
proto_rel_out_dir = rebase_path(proto_out_dir, root_build_dir)

ftrace_data_proto = all_proto
ftrace_data_codegen = []
ftrace_data_codegen_standard = []
foreach(proto, ftrace_data_proto) {
  dir = get_path_info(proto, "dir")
  name = get_path_info(proto, "name")
  ftrace_data_codegen += [
    "$proto_out_dir/$dir/$name.pb.h",
    "$proto_out_dir/$dir/$name.pb.cc",
  ]
  ftrace_data_codegen_standard += [
    "$proto_out_dir/$dir/${name}_standard.pb.h",
    "$proto_out_dir/$dir/${name}_standard.pb.cc",
  ]
}

all_proto_codegen = ftrace_data_codegen
all_proto_codegen += ftrace_data_codegen_standard

ftrace_plugin_config_proto = [ "trace_plugin_config.proto" ]
ftrace_plugin_config_codegen_standard = []
foreach(proto, ftrace_plugin_config_proto) {
  name = get_path_info(proto, "name")
  ftrace_plugin_config_codegen_standard += [
    "$proto_out_dir/$dir/${name}_standard.pb.h",
    "$proto_out_dir/$dir/${name}_standard.pb.cc",
  ]
}

action("all_proto_gen") {
  script = "${OHOS_PROFILER_DIR}/build/protoc.sh"
  sources = all_proto
  outputs = all_proto_codegen
  args = [
    "$libc_dir_proto",
    "$root_output_dir_proto",
    "$proto_rel_out_dir",
    "--cpp_out",
    "$proto_rel_out_dir",
    "--proto_path",
    rebase_path(".", root_build_dir),
  ]
  args += rebase_path(sources, root_build_dir)
  deps = [ "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protoc(${host_toolchain})" ]
}

config("public_configs") {
  include_dirs = [ "$proto_out_dir" ]
}

ohos_source_set("ftrace_data_cpp") {
  deps = [ ":all_proto_gen" ]
  public_deps = [
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf",
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf_lite",
  ]
  include_dirs = [ "$proto_out_dir" ]
  public_configs = [ ":public_configs" ]
  sources = ftrace_data_codegen
}

ohos_source_set("ftrace_data_cpp_standard") {
  deps = [ ":all_proto_gen" ]
  public_deps = [
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf",
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf_lite",
  ]
  include_dirs = [ "$proto_out_dir" ]
  public_configs = [ ":public_configs" ]
  sources = ftrace_data_codegen_standard
}

ohos_source_set("ftrace_plugin_config_cpp_standard") {
  deps = [ ":all_proto_gen" ]
  public_deps = [
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf",
    "${OHOS_PROFILER_3RDPARTY_PROTOBUF_DIR}:protobuf_lite",
  ]
  include_dirs = [ "$proto_out_dir" ]
  public_configs = [ ":public_configs" ]
  sources = ftrace_plugin_config_codegen_standard
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
}

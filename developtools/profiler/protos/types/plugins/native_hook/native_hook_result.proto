// Copyright (c) 2021 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_package = "ohos.devtools.datasources.transport.grpc.service";
option optimize_for = LITE_RUNTIME;

message Frame {
    uint64 ip = 1;
    uint64 sp = 2;
    string symbol_name = 3;
    string file_path = 4;
    uint64 offset = 5;
    uint64 symbol_offset = 6;
    uint32 symbol_name_id = 7;
    uint32 file_path_id = 8;
}

message AllocEvent {
    int32 pid = 1;
    int32 tid = 2;
    uint64 addr = 3;
    uint32 size = 4;
    repeated Frame frame_info = 5;
    uint32 thread_name_id = 6;
}

message FreeEvent {
    int32 pid = 1;
    int32 tid = 2;
    uint64 addr = 3;
    repeated Frame frame_info = 4;
    uint32 thread_name_id = 5;
}

message MmapEvent {
    int32 pid = 1;
    int32 tid = 2;
    uint64 addr = 3;
    string type = 4;
    uint32 size = 5;
    repeated Frame frame_info = 6;
    uint32 thread_name_id = 7;
}

message MunmapEvent {
    int32 pid = 1;
    int32 tid = 2;
    uint64 addr = 3;
    uint32 size = 4;
    repeated Frame frame_info = 5;
    uint32 thread_name_id = 6;
}

message MemTagEvent {
    uint64 addr = 1;
    uint32 size = 2;
    string tag = 3;
}

message FilePathMap {
    uint32 id = 1;
    string name = 2;
}

message SymbolMap {
    uint32 id = 1;
    string name = 2;
}

message ThreadNameMap {
    uint32 id = 1;
    string name = 2;
}

message NativeHookData {
    uint64 tv_sec = 1;
    uint64 tv_nsec = 2;
    oneof event {
        AllocEvent alloc_event = 3;
        FreeEvent free_event = 4;
        MmapEvent mmap_event = 5;
        MunmapEvent munmap_event = 6;
        MemTagEvent tag_event = 7;
        FilePathMap file_path = 8;
        SymbolMap symbol_name = 9;
        ThreadNameMap thread_name_map = 10;
    }
}

message BatchNativeHookData {
    repeated NativeHookData events = 1;
}
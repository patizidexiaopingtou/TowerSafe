// Copyright (c) 2021 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_package = "ohos.devtools.datasources.transport.grpc.service";

import "common_types.proto";

// Message define for profiler service, imported by profiler service proto file.
// for GetCapabilities
message GetCapabilitiesRequest {
    uint32 request_id = 1;
}

message ProfilerPluginCapability {
    string path = 1;
    string name = 2;
}

message GetCapabilitiesResponse {
    uint32 status = 1;
    repeated ProfilerPluginCapability capabilities = 2;
}


// for CreateSessionRequest
message ProfilerSessionConfig {
    message BufferConfig {
        enum Policy {
            RECYCLE = 0;
            FLATTEN = 1;
        };
        uint32 pages = 1;
        Policy policy = 2;
    }
    repeated BufferConfig buffers = 1;

    enum Mode {
        OFFLINE = 0; // save all plugin results to result file.
        ONLINE = 1;  // push all plugin results to host PC with streamed FetchDataResponse.
    };
    Mode session_mode = 2;
    string result_file = 3;     // for OFFLINE mode, result file path
    uint32 result_max_size = 4; // for OFFLINE mode, result file max size in KB
    uint32 sample_duration = 5; // for OFFLINE mode, sample duration in ms
    uint32 keep_alive_time = 6; // if set to non-zero value, session will auto-destroyed after CreateSession in ms
    bool discard_cache_data = 7; // if set true, session will stop immediately.(cache data will be lost)
    bool split_file = 8; // if set true, will split result_file
    uint32 single_file_max_size_mb = 9; // limit the maximum size of a single file
}

message CreateSessionRequest {
    uint32 request_id = 1;
    ProfilerSessionConfig session_config = 2;
    repeated ProfilerPluginConfig plugin_configs = 3;
}

message CreateSessionResponse {
    uint32 status = 1;
    uint32 session_id = 2;
    repeated ProfilerPluginState plugin_status = 3;
}

// for StartSession
message StartSessionRequest {
    uint32 request_id = 1;
    uint32 session_id = 2;
    repeated ProfilerPluginConfig update_configs = 3;
}

message StartSessionResponse {
    uint32 status = 1;
    repeated ProfilerPluginState plugin_status = 3;
}

// for FetchData
message FetchDataRequest {
    uint32 request_id = 1;
    uint32 session_id = 2;
    bytes addtion_data = 3;
}

message FetchDataResponse {
    uint32 status = 1;
    uint32 response_id = 2;
    bool has_more = 3;
    repeated ProfilerPluginData plugin_data = 4;
}

// for StopSession
message StopSessionRequest {
    uint32 request_id = 1;
    uint32 session_id = 2;
}

message StopSessionResponse {
    uint32 status = 1;
    repeated ProfilerPluginState plugin_status = 3;
}

// for DestroySession
message DestroySessionRequest {
    uint32 request_id = 1;
    uint32 session_id = 2;
}

message DestroySessionResponse {
    uint32 status = 1;
    repeated ProfilerPluginState plugin_status = 3;
}

// for KeepSession
message KeepSessionRequest {
    uint32 request_id = 1;
    uint32 session_id = 2;
    uint32 keep_alive_time = 3;
}

message KeepSessionResponse {
    uint32 status = 1;
}

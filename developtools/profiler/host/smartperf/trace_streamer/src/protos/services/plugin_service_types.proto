// Copyright (c) 2021 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common_types.proto";

// Message define for IPC interface, imported by plugin service proto file.
// for RegisterPlugin API
message RegisterPluginRequest {
    uint32 request_id = 1;
    string path = 2;
    string sha256 = 3;

    string name = 4;
    uint32 buffer_size_hint = 5;
}

message RegisterPluginResponse {
    uint32 status = 1;
    uint32 plugin_id = 2;
}

// for UnregisterPlugin API
message UnregisterPluginRequest {
    uint32 request_id = 1;
    uint32 plugin_id = 2;
}

message UnregisterPluginResponse {
    uint32 status = 1;
}

// for GetCommand API
message GetCommandRequest {
    uint32 request_id = 1;
}

message CreateSessionCmd {
    repeated uint32 buffer_sizes = 1;
    repeated ProfilerPluginConfig plugin_configs = 2;
}

message DestroySessionCmd {
    repeated uint32 plugin_ids = 1;
}

message StartSessionCmd {
    repeated uint32 plugin_ids = 1;
    repeated ProfilerPluginConfig plugin_configs = 2;
}

message StopSessionCmd {
    repeated uint32 plugin_ids = 1;
}

message GetCommandResponse {
    uint32 status = 1;
    bool has_more = 2;
    uint32 command_id = 3;
    oneof command {
        CreateSessionCmd create_session_cmd = 10;
        DestroySessionCmd destroy_session_cmd = 11;
        StartSessionCmd start_session_cmd = 12;
        StopSessionCmd stop_session_cmd = 13;
    }
}

// for NotifyResult API
message BufferDescriptor {
    int32 buffer_id = 1;
    uint32 offset = 2;
    uint32 length = 3;
}

message PluginResult {
    uint32 plugin_id = 1;
    oneof descriptor {
        bytes data = 2;
        BufferDescriptor buffer = 3;
    };
    ProfilerPluginState status = 10;
}

message NotifyResultRequest {
    uint32 request_id = 1;
    uint32 command_id = 2;
    repeated PluginResult result = 3;
}

message NotifyResultResponse {
    uint32 status = 1;
}

// Copyright (c) 2021 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_package = "ohos.devtools.datasources.transport.grpc.service";
option optimize_for = LITE_RUNTIME;

message RunningLockBegin {
    enum Type {
        UNSPECIFIED = 0;
        BACKGROUND = 1;
        PROXIMITY_SCREEN_CONTROL = 2;
    }

    int32 lock_id = 1; // 锁ID
    Type type = 2; // 唤醒锁的类型
    string name = 3; // 唤醒锁名称
}

message RunningLockEnd {
    int32 lock_id = 1; // 锁ID
}

message PendingIntent {
    string creator_package = 1; // 创建此PendingIntent的应用程序的程序包名称
    int32 creator_uid = 2; // 应用程序UID
}

enum TimerType {
    UNSPECIFIED = 0;
    TIMER_TYPE_REALTIME = 1;
    TIMER_TYPE_WAKEUP = 2;
    TIMER_TYPE_EXACT = 4;
    TIMER_TYPE_IDLE = 8;
}

message OneShotStart {
    PendingIntent intent = 1;
    int64 oneshot_id = 2;
    TimerType type = 3;
    int64 triggertime_ns = 4;
}

message RepeatStart {
    PendingIntent intent = 1;
    int64 repeat_id = 2;
    TimerType type = 3;
    int64 triggertime_ns = 4;
    int64 interval_ns = 5;
}

message TimerStop {
    int64 stop_id = 1;
}

message LocationRequest {
    enum Priority {
        UNSPECIFIED = 0;
        PRIORITY_UNSET = 512;
        PRIORITY_ACCURACY = 513;
        PRIORITY_LOW_POWER = 514;
        PRIORITY_FAST_FIRST_FIX = 515;
    }
    string provider = 1; // 提供位置的程序名称。通过LocationManager设置，则可以是“gps”、“network”、“passive”或空。通过FusedLocationProviderClient设置，则是“fused”。
    int64 interval_ms = 2; // 位置请求所需的间隔时间（ms），间隔时间越短越耗电
    int64 fastest_interval_ms = 3; // 位置请求的最快间隔时间（ms）
    Priority priority = 4; // 位置请求精确度，精确度越高越耗电
}

message LocationUpdateRequested {
    PendingIntent intent = 1; // 要为每个位置更新发送的挂起内容的元数据
    int32 location_id = 2; // 位置ID
    LocationRequest request = 3; // 位置更新请求
}

message LocationReport {
    int32 location_id = 1; // 位置ID
    float accuracy_of_metre = 2; // 该位置的估计水平精度，径向，单位为米。
}

message LocationUpdateRemoved {
    int32 location_id = 1; // 位置ID
}

message WorkInfo {
    enum BatteryLevel {
        BATTERY_LEVEL_LOW = 0;
        BATTERY_LEVEL_OKAY = 1;
        BATTERY_LEVEL_LOW_OR_OKAY = 2;
    }
    enum ChargeType {
        CHARGING_PLUGGED_ANY = 0;
        CHARGING_PLUGGED_AC = 1;
        CHARGING_PLUGGED_USB = 2;
        CHARGING_PLUGGED_WIRELESS = 3;
    }
    enum NetworkType {
        NETWORK_TYPE_ANY = 0;
        NETWORK_TYPE_MOBILE = 1;
        NETWORK_TYPE_WIFI = 2;
        NETWORK_TYPE_BLUETOOTH = 3;
        NETWORK_TYPE_WIFI_P2P = 4;
        NETWORK_TYPE_ETHERNET = 5;
    }
    enum StorageType {
        STORAGE_LEVEL_LOW = 0;
        STORAGE_LEVEL_OKAY = 1;
        STORAGE_LEVEL_LOW_OR_OKAY = 2;
    }

    string ability_name = 1; // 运行作业的页面名称
    string bundle_name = 2; // 运行作业的程序名称
    int32 repeat_counter = 3; // 重复作业次数
    int64 repeat_cycle_time = 4; // 定期作业重复的间隔时间
    BatteryLevel battery_level = 5; // 作业设备的电池等级
    int32 battery_status = 6; // 作业设备的电池状态
    ChargeType charge_type = 7; // 作业设备的充电类型
    int32 wait_time = 8; // 非定期作业的延迟时间
    NetworkType network_type = 9; // 作业运行的网络类型
    StorageType storage_type = 10; // 作业设备的存储类型
    bool is_request_battery = 11; // 作业是否需要设备的电池电量不低于临界阈值
    bool is_request_charging = 12; // 作业是否需要充电
    bool is_request_deep_idle = 13; // 作业是否需要设备处于空闲维护窗口中
    bool is_request_delay = 14; // 作业是否需要延迟
    bool is_request_network = 15; // 作业是否需要网络
    bool is_request_persisted = 16; // 是否应跨设备重新引导持久化此作业
    bool is_request_repeat = 17; // 是否在给定时间内重复作业
    bool is_request_storage = 18; // 作业是否需要设备的存储空间不低
    bool is_work_info_valid = 19; // 作业是否有效
}

message WorkStart {
    int64 work_id = 1;
    WorkInfo work_info = 2;
    bool start_now = 3;
    bool is_start = 4;
}

message WorkCancel {
    int64 work_id = 1;
    bool is_cancel = 2;
}

message WorkStop {
    int64 work_id = 1;
    bool is_stop = 2;
}

message BackgroundWork {
    int64 work_id = 1;
    int32 actual_delay_time = 2;
    int32 request_id = 3;
    string reason = 4;
}

message OnStartWork {
    int64 work_id = 1;
    WorkInfo work_info = 2;
}

message OnStopWork {
    int64 work_id = 1;
}

message AgentEnergyEvent {
    // timestamp obtained by CLOCK_REALTIME
    uint64 tv_sec = 1;
    uint64 tv_nsec = 2;
    string callstack = 3; // 生成此事件的调用堆栈
    oneof data {
        RunningLockBegin runlock_begin = 4; // 获取唤醒锁（强制设备保持唤醒）
        RunningLockEnd runlock_end = 5; // 释放唤醒锁
        OneShotStart oneshot_start = 6; // 闹钟
        RepeatStart repeat_start = 7; // 需要重复的闹钟
        TimerStop timer_stop = 8;
        LocationUpdateRequested location_update_requested = 9; // 位置更新请求
        LocationReport location_report = 10;
        LocationUpdateRemoved location_update_removed = 11; // 位置更新请求已删除
        WorkStart work_start = 12;
        WorkCancel work_cancel = 13;
        WorkStop work_stop = 14;
        BackgroundWork back_work = 15;
        OnStartWork on_start = 16; // 启动承载work的服务
        OnStopWork on_stop = 17; // 停止承载work的服务
    }
}

message BatchAgentEnergyEvent {
    repeated AgentEnergyEvent events = 1;
}

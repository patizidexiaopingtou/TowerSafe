# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")

import("//src/ts.gni")
ohos_source_set("table") {
  sources = [
    "appname_table.cpp",
    "appname_table.h",
    "args_table.cpp",
    "args_table.h",
    "bio_latency_sample_table.cpp",
    "bio_latency_sample_table.h",
    "callstack_table.cpp",
    "callstack_table.h",
    "clk_event_filter_table.cpp",
    "clk_event_filter_table.h",
    "clock_event_filter_table.cpp",
    "clock_event_filter_table.h",
    "clock_snapshot_table.cpp",
    "cpu_measure_filter_table.cpp",
    "cpu_measure_filter_table.h",
    "cpu_usage_info_table.cpp",
    "cpu_usage_info_table.h",
    "data_dict_table.cpp",
    "data_dict_table.h",
    "data_type_table.cpp",
    "data_type_table.h",
    "datasource_clockid_table.cpp",
    "device_state_table.cpp",
    "device_state_table.h",
    "disk_io_table.cpp",
    "disk_io_table.h",
    "ebpf_callstack_table.cpp",
    "ebpf_callstack_table.h",
    "file_system_sample_table.cpp",
    "file_system_sample_table.h",
    "filter_constraints.cpp",
    "filter_table.cpp",
    "filter_table.h",
    "hidump_table.cpp",
    "hidump_table.h",
    "index_map.cpp",
    "index_map.h",
    "instants_table.cpp",
    "instants_table.h",
    "irq_table.cpp",
    "live_process_table.cpp",
    "live_process_table.h",
    "log_table.cpp",
    "log_table.h",
    "measure_filter_table.cpp",
    "measure_filter_table.h",
    "measure_table.cpp",
    "measure_table.h",
    "meta_table.cpp",
    "meta_table.h",
    "native_hook_frame_table.cpp",
    "native_hook_frame_table.h",
    "native_hook_table.cpp",
    "native_hook_table.h",
    "network_table.cpp",
    "network_table.h",
    "paged_memory_sample_table.cpp",
    "paged_memory_sample_table.h",
    "process_filter_table.cpp",
    "process_filter_table.h",
    "process_measure_filter_table.cpp",
    "process_measure_filter_table.h",
    "process_table.cpp",
    "process_table.h",
    "range_table.cpp",
    "raw_table.cpp",
    "raw_table.h",
    "sched_slice_table.cpp",
    "sched_slice_table.h",
    "smaps_table.cpp",
    "smaps_table.h",
    "span_join.cpp",
    "span_join.h",
    "stat_table.cpp",
    "stat_table.h",
    "symbols_table.cpp",
    "symbols_table.h",
    "sysevent_measure_table.cpp",
    "sysevent_measure_table.h",
    "system_call_table.cpp",
    "system_call_table.h",
    "system_event_filter_table.cpp",
    "table_base.cpp",
    "thread_filter_table.cpp",
    "thread_state_table.cpp",
    "thread_table.cpp",
  ]

  include_dirs = [
    "//third_party/sqlite/include",
    "//src/base",
    "//src/trace_data",
    "//src/include",
    "//src",
    "${OHOS_PROTO_GEN}/types/plugins/memory_data",
    "//third_party/protobuf/src",
  ]

  if (enable_ts_utest && !use_wasm) {
    cflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
      "--coverage",
    ]
    if (is_macx && is_test) {
      cflags += [ "-D UT_MAC" ]
    }
  }
  if (with_perf) {
    sources += [
      "perf_call_chain_table.cpp",
      "perf_call_chain_table.h",
      "perf_files_table.cpp",
      "perf_files_table.h",
      "perf_report_table.cpp",
      "perf_report_table.h",
      "perf_sample_table.cpp",
      "perf_sample_table.h",
      "perf_thread_table.cpp",
      "perf_thread_table.h",
    ]
  }
}

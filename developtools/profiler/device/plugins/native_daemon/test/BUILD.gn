# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import(
    "//developtools/profiler/device/plugins/native_daemon/test/native_daemon.gni")
import("../../../base/config.gni")

module_output_path = "${OHOS_PROFILER_TEST_MODULE_OUTPUT_PATH}/device"

sources_base = [
  "unittest/common/native/callstack_test.cpp",
  "unittest/common/native/debug_logger_test.cpp",
  "unittest/common/native/elf_parser_test.cpp",
  "unittest/common/native/hashlist_test.cpp",
  "unittest/common/native/hook_manager_test.cpp",
  "unittest/common/native/hook_service_test.cpp",
  "unittest/common/native/register_test.cpp",
  "unittest/common/native/symbols_file_test.cpp",
  "unittest/common/native/utilities_test.cpp",
  "unittest/common/native/virtual_thread_test.cpp",
  "unittest/common/native/virtual_runtime_test.cpp",
  "../../api/src/buffer_writer.cpp",
  "../../api/src/command_poller.cpp",
  "../src/hook_manager.cpp",
  "../src/call_stack.cpp",
  "../src/debug_logger.cpp",
  "../src/dwarf_encoding.cpp",
  "../src/elf_file.cpp",
  "../src/elf_header.cpp",
  "../src/elf_symbol.cpp",
  "../src/get_thread_id.cpp",
  "../src/hook_service.cpp",
  "../src/program_header.cpp",
  "../src/register.cpp",
  "../src/section_header.cpp",
  "../src/stack_data_repeater.cpp",
  "../src/stack_preprocess.cpp",
  "../src/symbols_file.cpp",
  "../src/utilities.cpp",
  "../src/virtual_runtime.cpp",
  "../src/virtual_thread.cpp",
]

common_deps = [
  "${OHOS_PROFILER_DIR}/device/services/shared_memory:shared_memory_source",
  "${OHOS_PROFILER_DIR}/protos/services:plugin_service_proto",
  "${OHOS_PROFILER_DIR}/protos/services:profiler_service_all_type_source",
  "${OHOS_PROFILER_DIR}/protos/types/plugins/native_hook:native_hook_cpp",
  "../../../base:hiprofiler_base",
  "//base/startup/init/interfaces/innerkits:libbegetutil",
  "//third_party/bounds_checking_function:libsec_static",
  "//third_party/googletest:gmock_main",
  "//third_party/googletest:gtest_main",
  "//third_party/libunwind:unwind_source_${target_cpu}",
  "//third_party/zlib:libz",
]

config("native_daemon_test_config") {
  cflags = code_check_flag
  ldflags = []
  defines = []

  if (native_daemon_test_coverage && is_ohos) {
    defines += [ "TEST_COVERAGE" ]
    cflags += [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags += [ "--coverage" ]
  }

  defines += [ "DEFAULT_LOG_LEVEL=LEVEL_VERBOSE" ]
  defines += [ "is_ohos=1" ]
  defines += [
    "HAVE_LIBUNWIND=1",
    "HIPERF_DEBUG",
    "HIPERF_DEBUG_PRINTF",
    "CONFIG_NO_HILOG",
  ]
  defines += [ "target_cpu_${target_cpu}" ]

  include_dirs = [
    "../include",
    "../../../base/include",
    "../src/",
    "../../api/include",
    "../../api/src",
    "../../native_hook/include",
    "../../native_hook/src",
    "${OHOS_PROFILER_DIR}/interfaces/kits",
    "${OHOS_PROFILER_DIR}/device/services/ipc/include",
    "${OHOS_PROFILER_DIR}/device/services/shared_memory/include",
    "//base/startup/init/services/include/param",
    "//third_party/googletest/googletest/include/gtest",
    "//third_party/bounds_checking_function/include",
    "${native_daemon_path}/test/unittest/common/native/include",
    "${native_daemon_path}/include",
  ]
}

ohos_unittest("native_daemon_ut") {
  configs = [ ":native_daemon_test_config" ]
  module_out_path = module_output_path
  resource_config_file = "${OHOS_PROFILER_DIR}/device/ohos_test.xml"
  deps = common_deps
  use_exceptions = true
  sources = sources_base
  if (is_linux) {
    static_link = false
  }
  if (current_toolchain != host_toolchain) {
    defines = [ "HAVE_HILOG" ]
    external_deps = [ "hiviewdfx_hilog_native:libhilog" ]
  }
}

group("unittest") {
  testonly = true
  if (native_daemon_target_host) {
    deps = [ ":native_daemon_ut(${host_toolchain})" ]
  } else {
    deps = [ ":native_daemon_ut" ]
  }
}
